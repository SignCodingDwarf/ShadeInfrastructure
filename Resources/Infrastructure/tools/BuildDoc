#!/bin/bash

# file : BuildDoc
# author : SignC0dingDw@rf
# version : 1.0
# date : 30 December 2018
# Tool BuildDoc
# A tool allowing to build documentation

### Usage
# ./BuildDoc [options]
##            General Options
# -h or --help : show this help message and exit
# --version : show program's version number and exit
# -v or --verbose : run command in verbose mode
##            Content control
# -r or --regen : clean doc folder and regenerate

### Exit Code
#
# 0 : Command successfull
# 1 : Invalid argument
# 2 : Failed to clean doc folder
# 3 : Failed to create doxygen configuration file
# 4 : Documentation generation failed
#

###
# Copyright (c) 2018 SignC0dingDw@rf. All rights reserved
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###

###
# Copywrong (w) 2018 SignC0dingDw@rf. All profits reserved.
#
# This program is dwarven software: you can redistribute it and/or modify
# it provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copywrong 
#      notice and this list of conditions and the following disclaimer 
#      or you will be chopped to pieces AND eaten alive by a Bolrag.
#
#    * Redistributions in binary form must reproduce the above copywrong
#      notice, this list of conditions and the following disclaimer in 
#      the documentation and other materials provided with it or they
#      will be axe-printed on your stupid-looking face.
# 
#    * Any commercial use of this program is allowed provided you offer
#      99% of all your benefits to the Dwarven Tax Collection Guild. 
# 
#    * This software is provided "as is" without any warranty and especially
#      the implied warranty of merchantability or fitness to purport. 
#      In the event of any direct, indirect, incidental, special, examplary 
#      or consequential damages (including, but not limited to, loss of use;
#      loss of data; beer-drowning; business interruption; goblin invasion;
#      procurement of substitute goods or services; beheading; or loss of profits),   
#      the author and all dwarves are not liable of such damages even 
#      the ones they inflicted you on purpose.
# 
#    * If this program "does not work", that means you are an elf 
#      and are therefore too stupid to use this program.
# 
#    * If you try to copy this program without respecting the 
#      aforementionned conditions, then you're wrong.
# 
# You should have received a good beat down along with this program.  
# If not, see <http://www.dwarfvesaregonnabeatyoutodeath.com>.
###

### Version STR
VERSION_STR="1.0"

### Modules inclusion
. "infrastructureModules/utils.sh"

### Initialization
# Help Colors
usageColor='\033[1;34m' #Help on command is printed in light blue
descriptionColor='\033[1;31m' #Help on command is printed in light red
helpOptionsColor='\033[1;32m' #Help on options is printed in light green
helpCategoryColor="\033[1;33m" # Help options categories are printed in yellow
# Execution colors
statusColor='\033[1;34m' #Help on command is printed in light blue
errorColor='\033[1;31m' #Help on command is printed in light red
# Common
NC='\033[0m' # No Color

# Behavior variables
VERBOSE=false # Verbosity
REGEN=false # Need to regenerate

# Functions
##!
# @brief Display Usage Information of Generate tool
##
Usage()
{
    echo -e "Usage \n"
    echo -e "${usageColor} ./BuildDoc [options]${NC}\n"
    echo -e "${descriptionColor}Build Documentation${NC}\n"
    echo -e "Options:"
    echo -e "${helpCategoryColor}----- General Options -----${NC}"
    echo -e "${helpOptionsColor}-h${NC} or ${helpOptionsColor}--help${NC}\t\t show this help message and exit"
    echo -e "${helpOptionsColor}--version${NC}\t\t show program's version number and exit"
    echo -e "${helpOptionsColor}-v${NC} or ${helpOptionsColor}--verbose${NC}\t\t run command in verbose mode"
    echo -e ""
    echo -e "${helpCategoryColor}----- Additional operations -----${NC}"
    echo -e "${helpOptionsColor}-r${NC} or ${helpOptionsColor}--regen${NC}\t\t clean doc folder and regenerate"
    echo -e ""
}

### Parse command line arguments
for i in "$@" # for every input argument
do
	case $i in
		-h|--help) # if asked to render help
		Usage # Print help and exit
        exit 0
		;;
		--version) # if asked to display version
        echo -e "BuildDoc V${VERSION_STR}" # Print version and exit
        exit 0		
		;;
		-v|--verbose) # verbose mode
        VERBOSE=true
		;;
		-r|--regen) # clean step
        REGEN=true
		;;
		*) # default unknown argument error
        echo -e "${errorColor}Unknown argument ${i}${NC}"
        Usage
        exit 1
		;;
	esac
done

### Build Doc
# Check doc dicrectory
if [ -d doc ]; then
    if IsTrue "${REGEN}"; then
        IsTrue "${VERBOSE}" && echo -e "${statusColor}Removing doc folder${NC}"
        rm -r doc
        CODE=$?
        if [ $CODE -ne 0 ]; then
            echo -e "${errorColor}Supression of doc folder failed with code ${CODE}${NC}"
            exit 2
        fi
    fi
else
    IsTrue "${VERBOSE}" && echo -e "${statusColor}doc folder does not exist, generation needed.${NC}"
    REGEN=true
fi
        

# Rebuild Doc
if IsTrue "${REGEN}"; then
    IsTrue "${VERBOSE}" && echo -e "${statusColor}Generating Doxygen configuration file${NC}"
    cmake -DVERBOSE:bool=ON -DCONFIG_PATH:string="config/" -DTEMPLATE_PATH:string="template/" -DDOC_PATH:string="doc/" -P cmakeModules/CreateDocFile.cmake
    CODE=$?
    if [ $CODE -ne 0 ]; then
        echo -e "${errorColor}Doxygen configuration file creation failed with code ${CODE}${NC}"
        exit 3
    fi
fi

# Generate Doc
cd doc
doxygen .DoxyDoc
CODE=$? # Get return code
cd .. # Go back to call folder

if [ $CODE -ne 0 ]; then
    echo -e "${errorColor}Documentation generation failed with code ${CODE}${NC}"
    exit 4
fi

exit 0

#  ______________________________ 
# |                              |
# |    ______________________    |
# |   |                      |   |
# |   |         Sign         |   |
# |   |        C0ding        |   |
# |   |        Dw@rf         |   |
# |   |         1.0          |   |
# |   |______________________|   |
# |                              |
# |______________________________|
#               |  |
#               |  |
#               |  |
#               |  |
#               |  |
#               |  |
#               |  |
#               |  |
#               |  |
#               |  |
#               |__|
